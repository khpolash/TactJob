// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tactsoft.Service.DbDependencies;

#nullable disable

namespace Tactsoft.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tactsoft.Core.Entities.AcademicSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Achievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForeignUniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long>("LevelofEducationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("YearOfPassingId")
                        .HasColumnType("bigint");

                    b.Property<long>("boardId")
                        .HasColumnType("bigint");

                    b.Property<long>("degreeTitleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("LevelofEducationId");

                    b.HasIndex("ResultId");

                    b.HasIndex("YearOfPassingId");

                    b.HasIndex("boardId");

                    b.HasIndex("degreeTitleId");

                    b.ToTable("AcademicSummaries");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AppliedJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostingJobsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("PostingJobsId");

                    b.ToTable("AppliedJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.BloodGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BloodGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Board");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CareerAndApplicationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExpectedSalary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobNature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentSalary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("CareerAndApplications");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BusinessDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessTradeLicienceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressBangla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameBanglaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CompanySizeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPersonDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Entrepreneur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IndustialTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RLNO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ThanaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanySizeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("IndustialTypeId");

                    b.HasIndex("ThanaId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CompanySize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CompanyTotalSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("CompanySizes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyTotalSize = "10 too 100",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.DegreeTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DegreeTitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("DegreeTitle");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.DisabilityInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DisabilityDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("NationalDisabilityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("DisabilityInformation");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DistrictName = "Barisal"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EmployHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CompanyBusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("CurrentWoring")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmployeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmployeTo")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExpertiseId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpertiseTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Responsibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseId");

                    b.HasIndex("JobseekerId");

                    b.ToTable("EmployHistories");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Expertise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployHistoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpertiseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployHistoryId");

                    b.HasIndex("JobseekerId");

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.IndustryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IndustryTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("IndustryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            IndustryTypeName = "Devlopment"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("ApplyingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExptedSalary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostingJobsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("PostingJobsId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JobCategoryeLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobCategoryeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("JobCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            JobCategoryeLogo = "",
                            JobCategoryeName = "IT"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Jobseeker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Agree")
                        .HasColumnType("bit");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobseekerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Subscribe")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobCategoryId");

                    b.ToTable("Jobseekers");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobseekerSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Educational")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtracurricularActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobseekerSkillDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobseekerSkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NTVQF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Self")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("professionalTraining")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("JobseekerSkills");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LanguageProficiency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReadingId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpeakingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("WritingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("ReadingId");

                    b.HasIndex("SpeakingId");

                    b.HasIndex("WritingId");

                    b.ToTable("LanguageProficiencies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LevelofEducation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LevelofEducationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("LevelofEducations");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.OrganizationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            OrganizationName = "Government"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.OtherRelevantInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CareerSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeciaQualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("OtherRelevantInformations");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PermanentAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PermanentInsideBangladesh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentOthersAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ThanaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("ThanaId");

                    b.ToTable("PermanentAddresses");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PersonalDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AlternateEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BloodGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("JobseekerId");

                    b.ToTable("PersonalDetails");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Photography", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("Photographies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PostingJobs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdditionalRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalRequirment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalSalaryinfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Applying")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaOfBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaOfExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationRequirment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailAddress")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FestivelBonus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FreshersApply")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HardCoppy")
                        .HasColumnType("bit");

                    b.Property<long?>("IndustryTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Infoemail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InsideBangladesh")
                        .HasColumnType("bit");

                    b.Property<string>("InsuranceGratulty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobCategoryeId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobResponsibillites")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeySellingPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanchFacilitics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mainage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MamajobEmail")
                        .HasColumnType("bit");

                    b.Property<string>("Maxage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumSalary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumYearofExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAllowance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumSalary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumYearofExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoblieBil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NA")
                        .HasColumnType("bit");

                    b.Property<string>("Nah")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutsideBangladesh")
                        .HasColumnType("bit");

                    b.Property<string>("OverTimeAllowoanec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PensionPlicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformanceBouns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredEducationInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredRetiredArmy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfitShare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Providantfund")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ResumeReceivingOptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SalaryReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialInstructionforjobSeekers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourAllowance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Vacancy")
                        .HasColumnType("float");

                    b.Property<bool>("WalkinInterview")
                        .HasColumnType("bit");

                    b.Property<string>("Wekekly2Holidays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WorkatOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("Workathome")
                        .HasColumnType("bit");

                    b.Property<string>("personwithdisability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("publishon")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IndustryTypeId");

                    b.HasIndex("JobCategoryeId");

                    b.HasIndex("ResumeReceivingOptionId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PreferredAreas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialSkillsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SpecialSkillsId");

                    b.ToTable("PreferredAreas");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PresentAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PresentInsideBangladesh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentOthersAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ThanaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("ThanaId");

                    b.ToTable("PresentAddress");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ProfessionalCertificationSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DurationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DurationStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("ProfessionalCertifications");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Reading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReadingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Readings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ReadingName = "Bangla"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Reference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OffPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RelativeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("RelativeId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Relative", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RelativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Relatives");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            RelativeName = "Techer"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Result", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ResumeReceivingOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResumeOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ResumeReceivings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ResumeOption = "Apply Online"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ServiceTypeName = "Stand-out Listing"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Speaking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpeakingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Speakings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            SpeakingName = "Bangla"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.SpecialSkills", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpecialSkillsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SpecialSkills");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Thana", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("ThanaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Thanas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DistrictId = 1L,
                            ThanaName = "Porijpuer"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.TrainingSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicsCovered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingTitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("YearId");

                    b.ToTable("TrainingSummaries");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Writing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WritingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Writings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            WritingName = "Bangla"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.YearOfPassing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("YearOfPassingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("YearOfPassing");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AcademicSummary", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("AcademicSummaries")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.LevelofEducation", "LevelofEducation")
                        .WithMany("AcademicSummaries")
                        .HasForeignKey("LevelofEducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Result", "Result")
                        .WithMany("AcademicSummaries")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.YearOfPassing", "YearOfPassing")
                        .WithMany("AcademicSummaries")
                        .HasForeignKey("YearOfPassingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Board", "board")
                        .WithMany("AcademicSummaries")
                        .HasForeignKey("boardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.DegreeTitle", "degreeTitle")
                        .WithMany("AcademicSummaries")
                        .HasForeignKey("degreeTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");

                    b.Navigation("LevelofEducation");

                    b.Navigation("Result");

                    b.Navigation("YearOfPassing");

                    b.Navigation("board");

                    b.Navigation("degreeTitle");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AppliedJob", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("AppliedJobs")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.PostingJobs", "PostingJobs")
                        .WithMany("AppliedJobs")
                        .HasForeignKey("PostingJobsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");

                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CareerAndApplicationInfo", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("careerAndApplicationInfos")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Company", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.CompanySize", "CompanySize")
                        .WithMany("Companies")
                        .HasForeignKey("CompanySizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.District", "District")
                        .WithMany("Companies")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.IndustryType", "IndustialType")
                        .WithMany("Companies")
                        .HasForeignKey("IndustialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Thana", "Thana")
                        .WithMany("Companies")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanySize");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("IndustialType");

                    b.Navigation("Thana");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.DisabilityInformation", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("DisabilityInformation")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.District", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Country", "Countrys")
                        .WithMany("Districts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Countrys");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EmployHistory", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Expertise", "Expertises")
                        .WithMany("EmployHistories")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("EmployHistories")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Expertises");

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Expertise", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.EmployHistory", null)
                        .WithMany("Expertise")
                        .HasForeignKey("EmployHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", null)
                        .WithMany("Expertises")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobApplication", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.PostingJobs", "PostingJobs")
                        .WithMany("JobApplications")
                        .HasForeignKey("PostingJobsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");

                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Jobseeker", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.JobCategory", "JobCategory")
                        .WithMany("Jobseekers")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobseekerSkill", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("JobseekerSkills")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LanguageProficiency", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("LanguageProficiencies")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Reading", "Reading")
                        .WithMany("LanguageProficiencies")
                        .HasForeignKey("ReadingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Speaking", "Speaking")
                        .WithMany("LanguageProficiencies")
                        .HasForeignKey("SpeakingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Writing", "Writing")
                        .WithMany("LanguageProficiencies")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");

                    b.Navigation("Reading");

                    b.Navigation("Speaking");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.OtherRelevantInformation", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("OtherRelevants")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PermanentAddress", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Board", "Board")
                        .WithMany("PermanentAddresses")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("PermanentAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.District", "District")
                        .WithMany("PermanentAddresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("PermanentAddresses")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Thana", "Thana")
                        .WithMany("PermanentAddresses")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Jobseeker");

                    b.Navigation("Thana");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PersonalDetails", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.BloodGroup", "BloodGroup")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BloodGroup");

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Photography", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("Photographies")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PostingJobs", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Company", "Company")
                        .WithMany("PostingJobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.IndustryType", "IndustryType")
                        .WithMany("PostingJobs")
                        .HasForeignKey("IndustryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.JobCategory", "JobCategory")
                        .WithMany("PostingJobs")
                        .HasForeignKey("JobCategoryeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.ResumeReceivingOption", "ResumeReceivingOption")
                        .WithMany("PostingJobs")
                        .HasForeignKey("ResumeReceivingOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.ServiceType", "ServiceType")
                        .WithMany("PostingJobs")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("IndustryType");

                    b.Navigation("JobCategory");

                    b.Navigation("ResumeReceivingOption");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PreferredAreas", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("PreferredAreas")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.District", "District")
                        .WithMany("PreferredAreas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.JobCategory", "JobCategory")
                        .WithMany("PreferredAreas")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("PreferredAreas")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.OrganizationType", "Organization")
                        .WithMany("areas")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.SpecialSkills", "SpecialSkills")
                        .WithMany("PreferredAreas")
                        .HasForeignKey("SpecialSkillsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("JobCategory");

                    b.Navigation("Jobseeker");

                    b.Navigation("Organization");

                    b.Navigation("SpecialSkills");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PresentAddress", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Board", "Board")
                        .WithMany("PresentAddresses")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("PresentAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.District", "District")
                        .WithMany("PresentAddresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("PresentAddresses")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Thana", "Thana")
                        .WithMany("PresentAddresses")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Jobseeker");

                    b.Navigation("Thana");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ProfessionalCertificationSummary", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("ProfessionalCertificationSummary")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Reference", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("References")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Relative", "Relative")
                        .WithMany("References")
                        .HasForeignKey("RelativeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");

                    b.Navigation("Relative");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Thana", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.District", "District")
                        .WithMany("Thanas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.TrainingSummary", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Country", "country")
                        .WithMany("TrainingSummaries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Jobseeker", "Jobseeker")
                        .WithMany("TrainingSummaries")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.YearOfPassing", "YearOfPassing")
                        .WithMany("TrainingSummaries")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jobseeker");

                    b.Navigation("YearOfPassing");

                    b.Navigation("country");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.BloodGroup", b =>
                {
                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Board", b =>
                {
                    b.Navigation("AcademicSummaries");

                    b.Navigation("PermanentAddresses");

                    b.Navigation("PresentAddresses");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Company", b =>
                {
                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CompanySize", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Districts");

                    b.Navigation("PermanentAddresses");

                    b.Navigation("PreferredAreas");

                    b.Navigation("PresentAddresses");

                    b.Navigation("TrainingSummaries");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.DegreeTitle", b =>
                {
                    b.Navigation("AcademicSummaries");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.District", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PermanentAddresses");

                    b.Navigation("PreferredAreas");

                    b.Navigation("PresentAddresses");

                    b.Navigation("Thanas");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EmployHistory", b =>
                {
                    b.Navigation("Expertise");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Expertise", b =>
                {
                    b.Navigation("EmployHistories");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.IndustryType", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobCategory", b =>
                {
                    b.Navigation("Jobseekers");

                    b.Navigation("PostingJobs");

                    b.Navigation("PreferredAreas");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Jobseeker", b =>
                {
                    b.Navigation("AcademicSummaries");

                    b.Navigation("AppliedJobs");

                    b.Navigation("DisabilityInformation");

                    b.Navigation("EmployHistories");

                    b.Navigation("Expertises");

                    b.Navigation("JobApplications");

                    b.Navigation("JobseekerSkills");

                    b.Navigation("LanguageProficiencies");

                    b.Navigation("OtherRelevants");

                    b.Navigation("PermanentAddresses");

                    b.Navigation("PersonalDetails");

                    b.Navigation("Photographies");

                    b.Navigation("PreferredAreas");

                    b.Navigation("PresentAddresses");

                    b.Navigation("ProfessionalCertificationSummary");

                    b.Navigation("References");

                    b.Navigation("TrainingSummaries");

                    b.Navigation("careerAndApplicationInfos");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LevelofEducation", b =>
                {
                    b.Navigation("AcademicSummaries");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.OrganizationType", b =>
                {
                    b.Navigation("areas");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PostingJobs", b =>
                {
                    b.Navigation("AppliedJobs");

                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Reading", b =>
                {
                    b.Navigation("LanguageProficiencies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Relative", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Result", b =>
                {
                    b.Navigation("AcademicSummaries");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ResumeReceivingOption", b =>
                {
                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceType", b =>
                {
                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Speaking", b =>
                {
                    b.Navigation("LanguageProficiencies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.SpecialSkills", b =>
                {
                    b.Navigation("PreferredAreas");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Thana", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PermanentAddresses");

                    b.Navigation("PresentAddresses");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Writing", b =>
                {
                    b.Navigation("LanguageProficiencies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.YearOfPassing", b =>
                {
                    b.Navigation("AcademicSummaries");

                    b.Navigation("TrainingSummaries");
                });
#pragma warning restore 612, 618
        }
    }
}
